import asyncpg
import asyncio
from log.log import log_info
from config.config import DB_DSN, TABLES_SCHEMAS
from typing import Optional
from dataclasses import dataclass
from datetime import datetime

_pool = None

@dataclass
class PoolStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ connection pool"""
    timestamp: datetime
    size: int              # –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞ (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
    idle: int              # –ü—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    busy: int              # –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (size - idle)
    min_size: int          # –ú–∏–Ω–∏–º—É–º
    max_size: int          # –ú–∞–∫—Å–∏–º—É–º
    available: int         # –†–µ–∑–µ—Ä–≤ –¥–ª—è —Ä–æ—Å—Ç–∞ (max_size - size)
    busy_pct: float        # % –∑–∞–Ω—è—Ç—ã—Ö –æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö (0-100)
    capacity_pct: float    # % –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π —ë–º–∫–æ—Å—Ç–∏ –æ—Ç max_size (0-100)

async def create_pool():
    global _pool
    if _pool is None:
        _pool = await asyncpg.create_pool(DB_DSN, min_size=2, max_size=10)
        await log_info("–°–æ–∑–¥–∞–Ω –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL", type_msg="info")
    return _pool

async def get_connection():
    global _pool
    if _pool is None:
        await create_pool()
    return await _pool.acquire()

async def release_connection(connection):
    global _pool
    if _pool is not None:
        await _pool.release(connection)

async def close_pool():
    global _pool
    if _pool is None:
        return
    try:
        await asyncio.wait_for(_pool.close(), timeout=10)
        await log_info("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL –∑–∞–∫—Ä—ã—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", type_msg="info")
    except asyncio.TimeoutError:
        await log_info("–¢–∞–π–º-–∞—É—Ç Pool.close(); –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ", type_msg="warning")
        try:
            _pool.terminate()
            await log_info("–ü—É–ª PostgreSQL –ø—Ä–µ–∫—Ä–∞—â–µ–Ω", type_msg="info")
        except Exception as e:
            await log_info(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è pool.terminate(): {e}", type_msg="error")
    except Exception as e:
        await log_info(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ pool.close(): {e}", type_msg="error")
    finally:
        _pool = None


async def _ensure_indexes(conn):
    """–°–æ–∑–¥–∞—ë–º –ø–æ–ª–µ–∑–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã (idempotent)."""
    try:
        await conn.execute("CREATE INDEX IF NOT EXISTS idx_orders_status ON orders(status);")
        await conn.execute("CREATE INDEX IF NOT EXISTS idx_orders_order_date ON orders(order_date);")
        await conn.execute("CREATE INDEX IF NOT EXISTS idx_orders_driver_id ON orders(driver_id);")
    except asyncpg.PostgresError as e:
        await log_info(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤: {e}", type_msg="error")


async def _reconcile_orders_trip_start_default(conn):
    """
    –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É orders.trip_start –ù–ï–¢ DEFAULT now().
    –ï—Å–ª–∏ –µ—Å—Ç—å ‚Äî —Å–Ω–∏–º–∞–µ–º DEFAULT (ALTER COLUMN DROP DEFAULT).
    """
    try:
        q = """
        SELECT column_default
          FROM information_schema.columns
         WHERE table_schema='public' AND table_name='orders' AND column_name='trip_start';
        """
        default_expr = await conn.fetchval(q)
        if default_expr and "now()" in default_expr.lower():
            await conn.execute('ALTER TABLE "orders" ALTER COLUMN "trip_start" DROP DEFAULT;')
            await log_info("–°–Ω—è—Ç DEFAULT now() —É orders.trip_start", type_msg="info")
    except asyncpg.PostgresError as e:
        await log_info(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ DEFAULT —É orders.trip_start: {e}", type_msg="error")


async def init_db_tables():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü PostgreSQL.
    –°–æ–∑–¥–∞—ë—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã/–∫–æ–ª–æ–Ω–∫–∏, —á–∏–Ω–∏—Ç DEFAULT –∏ —Å—Ç–∞–≤–∏—Ç –∏–Ω–¥–µ–∫—Å—ã.
    """
    connection = None
    try:
        connection = await get_connection()

        for table_name, columns in TABLES_SCHEMAS.items():
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
            table_exists_query = """
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' AND table_name = $1
                );
            """
            exists = await connection.fetchval(table_exists_query, table_name)

            if not exists:
                # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
                columns_def = ", ".join([f'"{col}" {col_type}' for col, col_type in columns.items()])
                create_query = f'CREATE TABLE "{table_name}" ({columns_def});'
                await connection.execute(create_query)
                await log_info(f"–°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ {table_name} —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: {columns_def}", type_msg="info")
            else:
                # –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
                columns_query = """
                    SELECT column_name FROM information_schema.columns 
                    WHERE table_schema = 'public' AND table_name = $1;
                """
                existing_columns_rows = await connection.fetch(columns_query, table_name)
                existing_columns = {r["column_name"] for r in existing_columns_rows}

                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ
                for col, col_type in columns.items():
                    if col not in existing_columns:
                        alter_query = f'ALTER TABLE "{table_name}" ADD COLUMN "{col}" {col_type};'
                        try:
                            await connection.execute(alter_query)
                            await log_info(f"–í —Ç–∞–±–ª–∏—Ü—É {table_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ {col} ({col_type})", type_msg="info")
                        except asyncpg.PostgresError as e:
                            await log_info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {col} –≤ {table_name}: {e}", type_msg="error")

        # –î–æ–ø. —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –¥–ª—è orders:
        await _reconcile_orders_trip_start_default(connection)
        await _ensure_indexes(connection)

    except Exception as e:
        await log_info(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}", type_msg="error")
        raise
    finally:
        if connection:
            await release_connection(connection)

async def get_pool_stats() -> Optional[PoolStats]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–ª–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        PoolStats: –µ—Å–ª–∏ –ø—É–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.
        None: –µ—Å–ª–∏ –ø—É–ª –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.
    """
    global _pool
    if not _pool:
        return None
    
    size = _pool.get_size()          # –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    idle = _pool.get_idle_size()     # –ü—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏–µ
    min_size = _pool.get_min_size()
    max_size = _pool.get_max_size()
    
    busy = idle                           # –ê–∫—Ç–∏–≤–Ω—ã–µ
    available = max_size - size                  # –†–µ–∑–µ—Ä–≤ —Ä–æ—Å—Ç–∞
    busy_pct = (busy / max_size * 100) if size > 0 else 0        # % –∑–∞–Ω—è—Ç—ã—Ö
    capacity_pct = (size / max_size * 100) if max_size > 0 else 0  # % —ë–º–∫–æ—Å—Ç–∏
    
    return PoolStats(
        timestamp=datetime.now(),
        size=size,
        idle=idle,
        busy=busy,
        min_size=min_size,
        max_size=max_size,
        available=available,
        busy_pct=round(busy_pct, 1),
        capacity_pct=round(capacity_pct, 1)
    )


async def monitor_pool_health():
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—É–ª–∞.
    –ó–∞–ø—É—Å–∫–∞—Ç—å –≤ main.py –∫–∞–∫ asyncio.create_task()
    """
    previous_stats = 0

    while True:
        try:
            await asyncio.sleep(60)
            
            stats = await get_pool_stats()
            if not stats:
                continue
            
            async def log_info_pool():  
                await log_info(
                    f"[pool] size={stats.size}/{stats.max_size} "
                    f"(idle={stats.idle}, available={stats.available}) | "
                    f"busy={stats.busy_pct}%",
                    type_msg="info"
                )  


            changed = stats.busy_pct != previous_stats

            if changed:
                if stats.busy_pct >= 10 or stats.busy_pct == 0:
                    await log_info_pool()

                if 80 <= stats.busy_pct < 90:
                    await log_info(
                        f"‚ö†Ô∏è [pool] –í–´–°–û–ö–ê–Ø –ó–ê–ù–Ø–¢–û–°–¢–¨: {stats.busy_pct}% "
                        f"({stats.size}/{stats.max_size} –∞–∫—Ç–∏–≤–Ω—ã). "
                        f"–ü—É–ª –º–æ–∂–µ—Ç –≤—ã—Ä–∞—Å—Ç–∏ –¥–æ {stats.max_size} (–¥–æ—Å—Ç—É–ø–Ω–æ +{stats.available}).",
                        type_msg="warning"
                    )

            # –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ: –Ω–µ —Å–ø–∞–º–∏—Ç—å error, –∞ —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if stats.busy_pct >= 90 and changed:
                await log_info(
                    f"üö® [pool] –ë–õ–ò–ó–û–ö –ö –õ–ò–ú–ò–¢–£: {stats.busy_pct}% —ë–º–∫–æ—Å—Ç–∏ "
                    f"({stats.size}/{stats.max_size}). –£–≤–µ–ª–∏—á—å—Ç–µ DB_POOL_MAX_SIZE!",
                    type_msg="error"
                )

            previous_stats = stats.busy_pct
               
        except asyncio.CancelledError:
            break
        except Exception as e:
            await log_info(f"[pool] –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}", type_msg="error")