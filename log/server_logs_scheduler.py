# -*- coding: utf-8 -*-
"""
server_logs_scheduler.py ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –ª–æ–≥–æ–≤ –≤ —Å–ª—É–∂–µ–±–Ω—ã–π —á–∞—Ç –∏ —Ä–æ—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 07:00 UTC –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ LOGGING_FILE_PATH –∏ LOGGING_FILE_PATH_ADMINS
  –≤ —á–∞—Ç, –∑–∞–¥–∞–Ω–Ω—ã–π –≤ LOGGING_SETTINGS_TO_SEND_SERVER_LOGS.
- –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ ‚Äî —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª–æ–≤—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã,
  —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å —Å –Ω—É–ª—è.
- –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Ä–∞–∑–æ–≤–æ `send_server_logs_once()` (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —Ç–µ—Å—Ç–∞).

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:
1) –í —Ç–æ—á–∫–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞ –≤—ã–∑–æ–≤–∏—Ç–µ set_info_bot(bot) –∏–∑ –≤–∞—à–µ–≥–æ log.py (—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è).
2) –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ñ–æ–Ω–æ–≤–æ–π —Ç–∞—Å–∫:
       from server_logs_scheduler import start_daily_server_logs_task
       asyncio.create_task(start_daily_server_logs_task())
   –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `await start_daily_server_logs_task()` –≤ —Ñ–æ–Ω–µ –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏/–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ log.py –∏ –∫–æ–Ω—Ñ–∏–≥ –∏–∑ config.config.
"""

from __future__ import annotations

import os
import asyncio
from datetime import datetime, timedelta, timezone
import logging
from typing import Iterable

from config.config import (
    LOGGING_FILE_PATH,
    LOGGING_FILE_PATH_ADMINS,
    LOGGING_SETTINGS_TO_SEND_SERVER_LOGS,
)
# –ë–µ—Ä—ë–º –≤–∞—à–∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≥–ª–æ–±–∞–ª—ã
from log.log import send_info_msg, log_info, init_logging, init_admin_logging
from aiogram.types import FSInputFile

# ---------------------------------------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
# ---------------------------------------------------------------------------

def _now_utc() -> datetime:
    return datetime.now(timezone.utc)

def _seconds_until_next(hour: int = 7, minute: int = 0, second: int = 0) -> float:
    """–°–µ–∫—É–Ω–¥—ã –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è UTC (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 07:00:00)."""
    now = _now_utc()
    target = now.replace(hour=hour, minute=minute, second=second, microsecond=0)
    if target <= now:
        target += timedelta(days=1)
    return (target - now).total_seconds()

def _ensure_dir(path: str) -> None:
    d = os.path.dirname(path)
    if d and not os.path.exists(d):
        os.makedirs(d, exist_ok=True)

def _is_nonempty_file(path: str) -> bool:
    try:
        return os.path.isfile(path) and os.path.getsize(path) > 0
    except Exception:
        return False

def _file_caption(path: str) -> str:
    try:
        sz = os.path.getsize(path)
    except Exception:
        sz = 0
    ts = _now_utc().strftime("%Y-%m-%d %H:%M UTC")
    base = os.path.basename(path)
    return f"üìÑ {base} ‚Ä¢ {sz} bytes ‚Ä¢ dump at {ts}"

# ---------------------------------------------------------------------------
# –†–æ—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤: –∑–∞–∫—Ä—ã—Ç—å file handlers, —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª, –∑–∞–Ω–æ–≤–æ –ø–æ–≤–µ—Å–∏—Ç—å handler
# ---------------------------------------------------------------------------

def _close_handlers_for_file(target_path: str, logger: logging.Logger) -> None:
    """–£–¥–∞–ª—è–µ—Ç FileHandler-—ã —É logger, –∫–æ—Ç–æ—Ä—ã–µ –ø–∏—à—É—Ç –≤ target_path."""
    to_remove = []
    target_abs = os.path.abspath(target_path)
    for h in list(logger.handlers):
        if isinstance(h, logging.FileHandler):
            try:
                if os.path.abspath(h.baseFilename) == target_abs:
                    h.flush()
                    h.close()
                    to_remove.append(h)
            except Exception:
                # –Ω–∞ –≤—Å—è–∫–∏–π –ø–æ–∂–∞—Ä–Ω—ã–π –≤—Å—ë —Ä–∞–≤–Ω–æ —É–¥–∞–ª–∏–º
                to_remove.append(h)
    for h in to_remove:
        try:
            logger.removeHandler(h)
        except Exception:
            pass

def _readd_file_handler(path: str, logger: logging.Logger) -> None:
    _ensure_dir(path)
    fh = logging.FileHandler(path, encoding="utf-8")
    fh.setFormatter(logging.Formatter("%(asctime)s [%(levelname)s] %(message)s"))
    logger.addHandler(fh)

def _get_admin_logger() -> logging.Logger | None:
    # –í–∞—à admin-–ª–æ–≥–≥–µ—Ä —Å–æ–∑–¥–∞—ë—Ç—Å—è –≤ init_admin_logging() –∫–∞–∫ logger "admins"
    try:
        return logging.getLogger("admins")
    except Exception:
        return None

def _rotate_file(path: str, logger: logging.Logger) -> None:
    """–ó–∞–∫—Ä—ã—Ç—å handlers –¥–ª—è path, —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª, –ø–æ–≤–µ—Å–∏—Ç—å —Å–≤–µ–∂–∏–π FileHandler."""
    _close_handlers_for_file(path, logger)
    try:
        if os.path.exists(path):
            os.remove(path)
    except Exception:
        pass
    _readd_file_handler(path, logger)

# ---------------------------------------------------------------------------
# –†–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
# ---------------------------------------------------------------------------

async def send_server_logs_once() -> None:
    """
    –†–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ LOGGING_FILE_PATH –∏ LOGGING_FILE_PATH_ADMINS
    –≤ —á–∞—Ç LOGGING_SETTINGS_TO_SEND_SERVER_LOGS. –£—Å–ø–µ—Ö –ø–æ –∫–∞–∂–¥–æ–º—É —Ñ–∞–π–ª—É ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π.
    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: —É–¥–∞–ª–∏—Ç—å –∏ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä.
    """
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
    if not LOGGING_SETTINGS_TO_SEND_SERVER_LOGS.get("permission", True):
        await log_info("server_logs: sending disabled by config", type_msg="info")
        return

    chat_id = LOGGING_SETTINGS_TO_SEND_SERVER_LOGS.get("chat_id")
    thread_id = LOGGING_SETTINGS_TO_SEND_SERVER_LOGS.get("message_thread_id")

    # –ü—Ä–∏–≤–µ–¥—ë–º chat_id –∫ int, –µ—Å–ª–∏ —ç—Ç–æ ID; –µ—Å–ª–∏ —ç—Ç–æ username ‚Äî Telegram —Å–∞–º –ø–æ–π–º—ë—Ç
    try:
        chat_id_cast = int(str(chat_id))
    except Exception:
        chat_id_cast = chat_id

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ª–æ–≥–≥–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    await init_logging()
    await init_admin_logging()
    root_logger = logging.getLogger()
    admin_logger = _get_admin_logger() or logging.getLogger()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∞
    if _is_nonempty_file(LOGGING_FILE_PATH):
        resp = await send_info_msg(
            document=FSInputFile(LOGGING_FILE_PATH),
            caption=_file_caption(LOGGING_FILE_PATH),
            chat_id=chat_id_cast,
            message_thread_id=thread_id,
        )
        if resp:
            await log_info(f"server_logs: LOGGING_FILE_PATH sent ok ‚Üí {LOGGING_FILE_PATH}", type_msg="info")
            _rotate_file(LOGGING_FILE_PATH, root_logger)
        else:
            await log_info(f"server_logs: failed to send LOGGING_FILE_PATH ‚Üí {LOGGING_FILE_PATH}", type_msg="warning")
    else:
        await log_info(f"server_logs: file empty or missing ‚Üí {LOGGING_FILE_PATH}", type_msg="warning")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –ª–æ–≥–∞
    if _is_nonempty_file(LOGGING_FILE_PATH_ADMINS):
        resp = await send_info_msg(
            document=FSInputFile(LOGGING_FILE_PATH_ADMINS),
            caption=_file_caption(LOGGING_FILE_PATH_ADMINS),
            chat_id=chat_id_cast,
            message_thread_id=thread_id,
        )
        if resp:
            await log_info(f"server_logs: LOGGING_FILE_PATH_ADMINS sent ok ‚Üí {LOGGING_FILE_PATH_ADMINS}", type_msg="info")
            _rotate_file(LOGGING_FILE_PATH_ADMINS, admin_logger)
        else:
            await log_info(f"server_logs: failed to send LOGGING_FILE_PATH_ADMINS ‚Üí {LOGGING_FILE_PATH_ADMINS}", type_msg="warning")
    else:
        await log_info(f"server_logs: file empty or missing ‚Üí {LOGGING_FILE_PATH_ADMINS}", type_msg="warning")

# ---------------------------------------------------------------------------
# –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ç–∞—Å–∫
# ---------------------------------------------------------------------------

async def start_daily_server_logs_task():
    """
    –§–æ–Ω–æ–≤—ã–π —Ç–∞—Å–∫: –∂–¥—ë—Ç –¥–æ –±–ª–∏–∂–∞–π—à–∏—Ö 07:00 UTC, –∑–∞—Ç–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏.
    –ë–µ–∑–æ–ø–∞—Å–µ–Ω –∫ –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º ‚Äî –Ω–µ –ø–∞–¥–∞–µ—Ç, –ø–∏—à–µ—Ç –≤ –ª–æ–≥ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç.
    """
    while True:
        try:
            wait_sec = _seconds_until_next(7, 0, 0)
            await asyncio.sleep(wait_sec)
            await send_server_logs_once()
            # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫ –∑–∞–Ω—è–ª –≤—Ä–µ–º—è ‚Äî —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
            await asyncio.sleep(24 * 3600)
        except asyncio.CancelledError:
            raise
        except Exception as e:
            try:
                await log_info(f"server_logs: scheduler loop error: {e}", type_msg="error")
            except Exception:
                pass
            # –Ω–µ –∫—Ä—É—Ç–∏–º—Å—è —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
            await asyncio.sleep(60)
